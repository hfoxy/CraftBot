package me.hfox.craftbot.protocol.chunk;

import me.hfox.craftbot.exception.world.BotUnknownBlockException;
import me.hfox.craftbot.world.palette.BlockPalette;
import me.hfox.craftbot.world.palette.BlockStateDto;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class ChunkStreamTest {

    private final long[] chunk = {
            2380261325652689953L, 7066293092751640642L, -8925843906772066036L, 595047189471322640L,
            1190147705256576033L, 4760377444834281538L, -9074607971744214908L, -8925843906633645552L,
            595056260996432400L, 1190148840235238433L, 2382584593722181698L, -8930492783668359036L,
            -8925843906633654000L, 595056260442244112L, 1190112520884487201L, 2380225041768974402L,
            4760450083537948804L, -8925843906633654008L, 595056260442243600L, 1190112520884487201L,
            2380225041767892001L, 4760450083468675140L, -8921195171471146744L, -8331078183289339376L,
            1191274704675063345L, 4760447849046576226L, -9072283533229027192L, -8925843906633645552L,
            595056260996433168L, 1190148840788886561L, 2454643287271737410L, -8930492783668359036L,
            -8925843906633654000L, 595056260442260496L, 1190112520884487201L, 2380225041768974402L,
            4760450083537948804L, -8925843906633654008L, 595056260442243600L, 1190112520884487201L,
            2380225041767892001L, 4760450085750509700L, -8777079841661370104L, -8330796708312628720L,
            1191274704675063345L, 4760378579814026338L, -9000225939191099260L, -4165539100503031280L,
            595056260996432664L, 1190148840252015649L, 2382549409350092870L, -8930492783668096892L,
            -8925843889453784824L, 595056260442243600L, 1190112520884487201L, 2380225041768974402L,
            4760450083537948804L, -8925843906633654008L, 595056260442243600L, 1190114790841812001L,
            2380225041768973345L, 4760450085752606852L, -8777079841661640428L, -8330796726029368816L,
            1190112520884504113L, 2380226176748719202L, 4834832116091064452L, -4165539100503039472L,
            595056260459545368L, 1190112520884487201L, 2380225041768974406L, 4760450083538210948L,
            -8925843889453784824L, 595056260442243600L, 1190148840201684001L, 2454607003388020802L,
            -8925989184040988540L, 297528130221122064L, 595056260442785313L, 1190112591820686369L,
            8328354249618556994L, 4760450083537949134L, -8921195171470740588L, -8331078199663902192L,
            1190112520886601265L, 2380225077237091426L, 4762774522053136516L, -8331368755820748536L,
            595056260442243600L, 1190112520884487201L, 2380225041768974402L, 4760450083537948804L,
            -8925843906633654008L, 595110686821466640L, 4756999745112671265L, 4760450012601714754L,
            -8925848446552620924L, 297528130221130256L, 595056260459562017L, 1190112523101210657L,
            8330787717127637058L, -2157063550940333618L, -8925843905940917348L, 595101659631993360L,
            4165393734427575329L, 8144832569232394306L, 4767495754048747982L, -8925843905940918008L,
            595057679165571600L, 4165393734425412641L, 8324976549898029122L, 4760450083537949134L,
            -8925843905802505316L, 595110739192857104L, 4760431922198381601L, 8330787468850825282L,
            -1792146636797362044L, 297528155990946716L, 595056261827716921L, 1190203319264020513L,
            8330787717127644450L, -1785023518966924850L, -8925843905940917348L, 595101659632034320L,
            4165393820324758561L, 8324976549998692418L, 4760667786840259022L, -8925843905940917368L,
            595101659631993360L, 4165393820324758561L, 8330781971292686402L, -1796790973913482802L,
            -8925843905806699620L, 595110730602964752L, 4760431923859325985L, 8330787640649517122L,
            -1785180131123773308L, -4314157862436441188L, 595056261827716921L, 1190203319264071201L,
            -5396183947097627351L, -1785023503934539048L, -3571063948996852452L, 595101660705777465L,
            4165393823009113121L, 8330606049432242242L, 4760450083537959374L, -8925843905940917348L,
            595101659632034320L, 4165393823092999201L, 8330787468850825282L, -1796790973913482802L,
            -8925843905940917348L, 595057679166924600L, 1193018069031093281L, 8330787646185998402L,
            -1785169136007901042L, -3571063949689457764L, 595056304777389881L, 1193018069031177841L,
            -5356632209527296663L, 7438353068420389594L, -3570078760254909015L, 595137978984097593L,
            7122061404290008177L, -6657197588596324286L, -2157078944103114026L, -8925843905386728548L,
            595137979251222288L, 6545618793925739553L, -5360155398355482558L, -1785531974845048106L,
            -8925843905940376148L, 595101660740380472L, 1283162698065495073L, -5355506483636139966L,
            7726578893569790094L, 5949545662571787693L, 595056305885768538L, 1193090707734811281L,
            -5355506275260715669L, 7735731385744841430L, -7140697966358645331L, 2380252281283372859L,
            7698540367254772967L, -5360155221007720184L, -1785180131124159786L, -8925843905386728036L,
            595137979520706360L, 6545618862647837729L, -5355510889441064894L, 7726422281882327766L,
            -4314157887496211027L, 595101695100152633L, 4165466461797207585L, -5355506346197186494L,
            7735726830312886734L, -3272841211843529299L, -8628314356579472550L, 1283162700282254996L,
            -5355506343980192405L, 7735731385749035734L, -2975290381772081747L, 2092021905131137626L,
            6545618864795409639L, -5355651621380153080L, -1785168779122943274L, -3593581946580060756L,
            595137978983868217L, 6545618864862512161L, -5355506486025844670L, 7726433276998605526L,
            -3593581946580060755L, 1784070688423635801L, 5356668563238801041L, -5355506343982589754L,
            7735731243392059990L, -2975603635488639571L, -6610639566750782630L, 5356668563238868660L,
            -5355506343980192405L, 7735731385749166806L, -2975281585679059539L, 2083014705876396890L,
            6545618864864679607L, -5355510883891830520L, 7438203255596931798L, -3571063948443208275L,
            595137978983869241L, 6545618864862514801L, -5355506485858072510L, 7735440476253346518L,
            -3570500998489786963L, -7438157856338252967L, 5392697360257830547L, -5355506343980263226L,
            7735731380839402070L, -2975603635488639571L, -6610639566750782630L, 5356668563238868660L,
            -5355506343980192405L, 7735731385749166806L, -2975281302211218003L, -5987717301348242598L,
            6545618864864679605L, -5355506343981376280L, 7735722305900403414L, -3570338270768876115L,
            595137978983869273L, 6545618864864611953L, -5355506348413876158L, 7735722294827440854L,
            -3570360261001431635L, -7151053380093383846L, 6545618864864679603L, -5355506343980260158L,
            7735731385595480790L, -2975291374177962579L, -6565603020721263782L, 5392697360257832629L,
            -5355506343980192405L, 7735731385749166806L, -2975281302211218003L, -5951688504329278630L,
            6545618864864679605L, -5355506343980196633L, 7735731376882146006L, -2993876809795848787L,
            -7140638805955089574L, 6545618864864677491L, -5355506344118739902L, 7735731102003911382L,
            -2975862432761203283L, -7142046180838642854L, 6545618864864679605L, -5355506343980196638L,
            7735731385472080598L, -2975299461332945491L, -5987717301348242598L, 6545618864864679605L,
            -5355506343980192405L, 7735731385749166806L, -2975281302211218003L, -5950562604422436006L,
            6545618864864679605L, -5355506343980192401L, 7735731385757817558L, -2975280735275534931L,
            -4760486402889782438L, 6545618864864679607L, -5355506343975863065L, 7735731394615663318L,
            -2975263177449228883L, -5915659707310314662L, 6545618864864679605L, -5355506343980192281L,
            7735731385757817558L, -2975280735275534931L, -5949436704515593382L, 6545618864864679605L,
            0L, 0L, 0L, 0L,
            0L, 0L, 0L, 0L,
            144115188075855872L, 0L, 495L, 983040L,
            64424509440L, 4222124650659840L, 0L, 15L,
            33554432, 0, 4503599627370496L, 0
    };

    @Test
    void validateRead() {
        List<Long> longs = new ArrayList<>();
        longs.add(-6148914691236517206L); // 1010101010101010101010101010101010101010101010101010101010101010
        longs.add(-6148914691236517206L); // 1010101010101010101010101010101010101010101010101010101010101010

        ChunkStream stream = new ChunkStream(longs, (short) 4);

        int length = longs.size() * 8 * 2;
        for (int i = 0; i < length; i++) {
            assertEquals(10, stream.read(), "failed on " + i + " index");
        }

        assertEquals(0, stream.readableBits());

        longs = new ArrayList<>();
        longs.add(6148914691236517205L); // 0101010101010101010101010101010101010101010101010101010101010101
        longs.add(6148914691236517205L); // 0101010101010101010101010101010101010101010101010101010101010101

        stream = new ChunkStream(longs, (short) 4);

        length = longs.size() * 8 * 2;
        for (int i = 0; i < length; i++) {
            assertEquals(5, stream.read(), "failed on " + i + " index");
        }

        assertEquals(0, stream.readableBits());

        longs = new ArrayList<>();
        longs.add(6148914691236517205L); // 0101010101010101010101010101010101010101010101010101010101010101
        longs.add(6148914691236517205L); // 0101010101010101010101010101010101010101010101010101010101010101

        stream = new ChunkStream(longs, (short) 5);

        boolean isA = true;
        short a = 0b10101;
        short b = 0b01010;

        length = 25;
        for (int i = 0; i < length; i++) {
            assertEquals(isA ? a : b, stream.read(), "failed on " + i + " index");
            isA = !isA;
        }

        assertEquals(3, stream.readableBits());
    }

    @Test
    void validateActualChunk() throws IOException {
        BlockPalette.load();
        int[] palette = new int[]{0, 6, 1, 68, 4, 70, 71, 10, 2, 66, 1344, 34, 1346, 1345, 3945, 9, 1341};

        short bitsPerBlock = 5;
        List<Long> longs = new ArrayList<>();
        for (long l : chunk) {
            longs.add(l);
        }

        ChunkStream stream = new ChunkStream(longs, bitsPerBlock);
        for (int y = 0; y < 16; y++) {
            for (int z = 0; z < 16; z++) {
                for (int x = 0; x < 16; x++) {
                    int blockId = palette[stream.read()];
                    BlockStateDto blockState = BlockPalette.findById(blockId).orElseThrow(() -> new BotUnknownBlockException(Integer.toString(blockId)));
                }
            }
        }
    }

}